{
    "full_executed": true,
    "hnn_version": "0.4.2",
    "parallelism_mpi_notebook.ipynb": {
        "7.8: Parallelism: Using the MPI backend": {
            "level": 1,
            "html": "                <div class='markdown-cell'>\n                    <h1>7.8: Parallelism: Using the MPI backend</h1>\n<p>This example demonstrates how to use the MPI backend for simulating\ndipoles using <code>hnn_core</code>.</p>\n<p><code>hnn_core</code> can take advantage of MPI libraries such as <a\nhref=\"https://www.open-mpi.org/\">OpenMPI</a> to run a\n<strong>single</strong> simulation using <strong>multiple</strong> CPU\nprocessors. MPI lets you divide parts of your simulated network across\nCPUs while allowing the CPUs to \"talk\" to each other, and can therefore\nenable <em>significant</em> speed-up of individual simulations.</p>\n<p>Note that to use MPI parallelism, you need either the\n<code>conda</code> install <strong>or</strong> the <code>pip</code>\n<code>MPI Installation</code> dependencies described <a\nhref=\"https://jonescompneurolab.github.io/textbook/content/01_getting_started/installation.html\">in\nour Installation Guide here</a>.</p>\n<p>Note that MPI parallelism is distinct from <code>hnn_core</code>'s\nuse of <a\nhref=\"https://jonescompneurolab.github.io/textbook/content/08_using_hnn_api/parallelism_joblib.html\">Joblib\nparallelism, which can be found here</a>.</p>\n\n                </div>\n\n\n                <!-- code cell -->\n                <div class='code-cell'>\n                    <code class='language-python'>\n                        # Authors: Mainak Jas <mjas@mgh.harvard.edu>\n#          Blake Caldwell <blake_caldwell@brown.edu>\n#          Austin Soplata <austin_soplata@brown.edu>\n                    </code>\n                </div>\n\n\n<!-- markdown cell -->\n<div class='markdown-cell'>\n    <p>Let us import what we need from <code>hnn_core</code>:</p>\n\n</div>\n\n\n                <!-- code cell -->\n                <div class='code-cell'>\n                    <code class='language-python'>\n                        import matplotlib.pyplot as plt\n\nfrom hnn_core import simulate_dipole, jones_2009_model\nfrom hnn_core.viz import plot_dipole\n                    </code>\n                </div>\n\n\n                <!-- markdown cell -->\n                <div class='markdown-cell'>\n                    <p>Following our <a\nhref=\"https://jonescompneurolab.github.io/textbook/content/06_alpha_beta/api.html\">Alpha\nexample</a>, we will create our network and add a ~10 Hz \"bursty\"\ndrive:</p>\n\n                </div>\n\n\n                <!-- code cell -->\n                <div class='code-cell'>\n                    <code class='language-python'>\n                        net = jones_2009_model()\n\nweights_ampa = {'L2_pyramidal': 5.4e-5, 'L5_pyramidal': 5.4e-5}\nnet.add_bursty_drive(\n    'bursty', tstart=50., burst_rate=10, burst_std=20., numspikes=2,\n    spike_isi=10, n_drive_cells=10, location='distal',\n    weights_ampa=weights_ampa, event_seed=278)\n                    </code>\n                </div>\n\n\n                <!-- markdown cell -->\n                <div class='markdown-cell'>\n                    <p>Finally, we will simulate using the <a\nhref=\"https://jonescompneurolab.github.io/hnn-core/stable/generated/hnn_core.parallel_backends.MPIBackend.html#hnn_core.parallel_backends.MPIBackend\"><code>MPIBackend</code>\nclass</a>. This will start the simulation across the number of\nprocessors (cores) specified by <code>n_procs</code> using MPI.</p>\n\n                </div>\n\n\n                <!-- code cell -->\n                <div class='code-cell'>\n                    <code class='language-python'>\n                        from hnn_core import MPIBackend\n\nwith MPIBackend(n_procs=4, mpi_cmd='mpiexec'):\n    dpls = simulate_dipole(net, tstop=210., n_trials=1)\n                    </code>\n                </div>\n\n\n                <!-- code cell output -->\n                <div class='output-cell'>\n                    <div class='output-label'>\n                        Out:\n                    </div>\n                    <div class='output-code'>\n\n        MPI will run 1 trial(s) sequentially by distributing network neurons over 4 processes.\n\n        numprocs=4\n\n        Loading custom mechanism files from /usr/share/miniconda/envs/textbook-env-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nLoading custom mechanism files from /usr/share/miniconda/envs/textbook-env-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\nBuilding the NEURON model\nLoading custom mechanism files from /usr/share/miniconda/envs/textbook-env-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.soLoading custom mechanism files from /usr/share/miniconda/envs/textbook-env-mpi/lib/python3.12/site-packages/hnn_core/mod/x86_64/libnrnmech.so\n\n\n        [Done]\nTrial 1: 0.03 ms...\n\n        Trial 1: 10.0 ms...\n\n        Trial 1: 20.0 ms...\n\n        Trial 1: 30.0 ms...\n\n        Trial 1: 40.0 ms...\n\n        Trial 1: 50.0 ms...\n\n        Trial 1: 60.0 ms...\n\n        Trial 1: 70.0 ms...\n\n        Trial 1: 80.0 ms...\n\n        Trial 1: 90.0 ms...\n\n        Trial 1: 100.0 ms...\n\n        Trial 1: 110.0 ms...\n\n        Trial 1: 120.0 ms...\n\n        Trial 1: 130.0 ms...\n\n        Trial 1: 140.0 ms...\n\n        Trial 1: 150.0 ms...\n\n        Trial 1: 160.0 ms...\n\n        Trial 1: 170.0 ms...\n\n        Trial 1: 180.0 ms...\n\n        Trial 1: 190.0 ms...\n\n        Trial 1: 200.0 ms...\n\n                    </div>\n                </div>\n\n\n                <!-- code cell -->\n                <div class='code-cell'>\n                    <code class='language-python'>\n                        plot_dipole(dpls, show=False)\nplt.show()\n                    </code>\n                </div>\n\n\n                <!-- code cell output -->\n                <div class='output-cell'>\n                    <div class='output-label'>\n                        Out:\n                    </div>\n                    <div class='output-code'>\n\n        &lt;Figure size 640x480 with 1 Axes&gt;\n                    </div>\n                </div>\n\n\n<!-- code cell image -->\n<div class='output-cell'>\n    <img src='output_nb_parallelism_mpi_notebook/fig_01.png'/>\n</div>"
        }
    }
}